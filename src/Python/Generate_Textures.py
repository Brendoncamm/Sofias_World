import json

# This portion of the script parses a directory and fines all the texture files
# and generates a JSON file with the texture keys and their paths
# The JSON file is then used to generate a header file with the texture keys
import os
def parse_directory(directory):
    texture_files = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith(".png") or file.endswith(".jpg"):
                texture_files.append(os.path.join(root, file))
    return texture_files

def generate_json(texture_files):
    texture_dict = {}
    for texture in texture_files:
        key = os.path.splitext(os.path.basename(texture))[0]
        # Remove ../../ from the value
        texture = texture.replace("../../", "")
        texture_dict[key] = texture
    with open('../Textures.JSON', 'w') as file:
        json.dump(texture_dict, file, indent=4)

# Generate the JSON file
texture_files = parse_directory("../../Images")
generate_json(texture_files)

# This portion of the script generates a header file with the texture keys
# and their paths
with open('../Textures.JSON', 'r') as file:
    data = json.load(file)

# Extract the texture data
with open("../TextureKeys.h", "w") as header:
    header.write("#pragma once\n\n")
    header.write("// This file is generated by Generate_Textures.py\n")
    header.write("// Do not edit this file manually\n")
    header.write("#include <string_view>\n\n")
    header.write("namespace TextureKeys {\n")
    for key in data.keys():
        header.write(f'    inline constexpr std::string_view {key} = "{key}";\n')
    header.write("}\n")
    